The ``ob-axiom'' package is an org-babel extension that integrates
the axiom-environment into org-mode, allowing a literate
development & presentation style with easy publishing to HTML, PDF,
etc.

See the ``Working with source code'' chapter of the Org manual for
details on using org-babel functionality in org files.

To enable this extension put

 (require 'ob-axiom)

in your ~/.emacs initialisation file.

There are two language names defined in this extension: ``axiom''
and ``spad''.  The former is for running arbitrary code in a
running axiom process, the latter for embedding SPAD source code
blocks, but both are declared as tangle'able languages.  They
correspond to ``axiom-input-mode'' and ``axiom-spad-mode'' in the
axiom-environment system, respectively.

The default behaviour of ``axiom'' source code blocks in ob-axiom
is that of ``:results output'' mode, i.e. scripting mode in the
terminology of the Org manual.  If this is unfamiliar to you, see
the ``Header arguments'' section of the ``Working with source
code'' chapter for more information on what this means.  By
default, all of the input line to Axiom, including the prompt, as
well as the output generated by Axiom, is echoed in the output
captured by Org.  To change this use the extra header options
explained below.

There are three extra header options (non-standard org-babel options)
for ``#+BEGIN_SRC axiom'' source code blocks:-

  :block-read <yes/no/auto>  (defaults to auto)
  :show-prompt <yes/no>      (defaults to yes)
  :show-input <yes/no>       (defaults to yes)

The block-read option forces ob-axiom to send the entire code block
to the running axiom process via a temporary file.  This allows
``pile mode'' axiom source code to be handled correctly.  Otherwise
ob-axiom sends each line of the code block individually to the
axiom process for interpretation.

The show-prompt option allows to enable or inhibit the display of
the axiom REPL prompt on a block-by-block basis.

The show-input option allows to enable or inhibit the display of
the axiom input command/source on a block-by-block basis.

Finally, a useful tip for FriCAS.  If you want to suppress the
numbering of prompts and output results that FriCAS normally
generates, put the following at the start of your Org file:-

#+BEGIN_SRC axiom :results silent :exports none
)set message prompt plain
)boot $IOindex := nil
#+END_SRC
