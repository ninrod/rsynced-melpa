;;; unicode-input.el --- Support for unicode character input
;;
;; Copyright(C) 2014-2015 m00nlight
;;
;; This file is NOT part of GNU Emacs.
;;
;; Author: m00nlight <dot_wangyushi@yeah.net>
;; Maintainer: m00nlight <dot_wangyushi@yeah.net>
;; Created: 13 Dec 2014
;; Keywords: unicode, input,
;; Package-Version: 20141219.720
;; Bitbucket: https://bitbucket.org/m00nlight/unicode-input/

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.



;;
;;; Commentary:
;; The unicode-input.el is for use to input unicode character while editing.
;; It is mainly an solution to the problem haskell-unicode-input-method can
;; not work simultaneously with the "company-ghc" mode.
;;
;; For convenient usage, the package define some abbrevations for the Greek
;; letters. One can easily enable "abbrev-mode" in certain programming mode
;; for convenient Greek letters replacement.  So you need to enable the
;; "abbrev-mode" in the mode hook. For this part, see the installation part
;; for details.
;;
;; The haskell unicode symbol mainly contains the unicode symbol defined in
;; "Prelude.Unicode" in the base-unicode-symbol package, except the "√∑", it
;; seems to be an keyboard macro of Emacs. Need *TODO* solve the future. See
;; <http://hackage.haskell.org/package/base-unicode-symbols-0.2.2.4/docs/\
;; Prelude-Unicode.html> for details.


;;; Installation:
;;
;; To use "unicode-input" in "haskell-mode", you need to do the following:
;;
;; 1. You need first to install and configure the haskell-mode for haskell
;; programming either from the "elpa" packages or from the source. You can
;; see the instruction <https://github.com/haskell/haskell-mode>. Notice not
;; to enable the "haskell-unicode-input-method".
;;
;; 2. Place unicode-input.el on you emacs load-path
;;
;; 3. Compile the file (for speed)
;; M-x byte-compile-file <location of unicode-input.el>
;;
;; 4. Add the following to your .emacs/init file
;; (require 'unicode-input)
;;
;; Usage:
;;
;; (require 'haskell-mode)
;; (require 'unicode-input)

;; (add-hook 'haskell-mode-hook
;; 	  (lambda ()
;; 	    (abbrev-mode 1)
;; 	    (unicode-input-mode 1)))

;;; Usage:
;;
;; For Greek letters, just type their name and it will be replaced by their
;; unicode counter-part.
;;
;; For other unicode characters, just press <f9> and then press their ansi
;; plain counter-part, then unicode character will be inserted at the cursor.

;; To enable base unicode syntax for you haskell program, you need to put 
;; {-# LANGUAGE UnicodeSyntax #-} at the beginning of you program, and
;; "import Prelude.Unicode" in you program. For the set related unicode symbols
;; you may also need to "import Data.List.Unicode" into you program. A sample
;; haskell program may look like the following

;; {-# LANGUAGE UnicodeSyntax #-}
;; import Prelude.Unicode
;; import Data.List.Unicode

;; myId ‚à∑ a ‚Üí a
;; myId x = x

;; dummyId ‚à∑ a ‚Üí a
;; dummyId = myId ‚àò myId

;; dummyConcat ‚à∑ [a] ‚Üí [a] ‚Üí [a]
;; dummyConcat xs ys = xs ‚ß∫ ys



;;; Code:

(defvar unicode-input-prefix "<f9>"
  "Default keymap prefix.")

(defvar *unicode-input-greek-letters*
  '(("alpha"		"Œ±")
    ("Alpha"		"Œë")
    ("beta"		"Œ≤")
    ("Beta"		"Œí")
    ("gamma"		"Œ≥")
    ("Gamma"		"Œì")
    ("delta"		"Œ¥")
    ("Delta"		"Œî")
    ("epsilon"		"Œµ")
    ("Epsilon"		"Œï")
    ("zeta"		"Œ∂")
    ("Zeta"		"Œñ")
    ("eta"		"Œ∑")
    ("Eta"		"Œó")
    ("theta"		"Œ∏")
    ("Theta"		"Œò")
    ("iota"		"Œπ")
    ("Iota"		"Œô")
    ("kappa"		"Œ∫")
    ("Kappa"		"Œö")
    ("lambda"		"Œª")
    ("Lambda"		"Œõ")
    ("lamda"		"Œª")
    ("Lamda"		"Œõ")
    ("mu"		"Œº")
    ("Mu"		"Œú")
    ("nu"		"ŒΩ")
    ("Nu"		"Œù")
    ("xi"		"Œæ")
    ("Xi"		"Œû")
    ("omicron"		"Œø")
    ("Omicron"		"Œü")
    ("pi"		"œÄ")
    ("Pi"		"Œ†")
    ("rho"		"œÅ")
    ("Rho"		"Œ°")
    ("sigma"		"œÉ")
    ("Sigma"		"Œ£")
    ("tau"		"œÑ")
    ("Tau"		"Œ§")
    ("upsilon"		"œÖ")
    ("Upsilon"		"Œ•")
    ("phi"		"œÜ")
    ("Phi"		"Œ¶")
    ("chi"		"œá")
    ("Chi"		"Œß")
    ("psi"		"œà")
    ("Psi"		"Œ®")
    ("omega"		"œâ")
    ("Omega"		"Œ©")
    ("digamma"		"œù")
    ("Digamma"		"œú")
    ("san"		"œª")
    ("San"		"œ∫")
    ("qoppa"		"œô")
    ("Qoppa"		"œò")
    ("sampi"		"œ°")
    ("Sampi"		"œ†")
    ("stigma"		"œõ")
    ("Stigma"		"œö")
    ("heta"		"Õ±")
    ("Heta"		"Õ∞")
    ("sho"		"œ∏")
    ("Sho"		"œ∑")))

(define-abbrev-table 'global-abbrev-table
  *unicode-input-greek-letters*)

(defvar *unicode-input-haskell-characters*
  '(("A"		"ùî∏")
    ("B"		"ùîπ")
    ("C"		"‚ÑÇ")
    ("D"		"ùîª")
    ("E"		"ùîº")
    ("F"		"ùîΩ")
    ("G"		"ùîæ")
    ("H"		"‚Ñç")
    ("I"		"ùïÄ")
    ("J"		"ùïÅ")
    ("K"		"ùïÇ")
    ("L"		"ùïÉ")
    ("M"		"ùïÑ")
    ("N"		"‚Ñï")
    ("O"		"ùïÜ")
    ("P"		"‚Ñô")
    ("Q"		"‚Ñö")
    ("R"		"‚Ñù")
    ("S"		"ùïä")
    ("T"		"ùïã")
    ("U"		"ùïå")
    ("V"		"ùïç")
    ("W"		"ùïé")
    ("X"		"ùïè")
    ("Y"		"ùïê")
    ("Z"		"‚Ñ§")
    ("|gamma|"		"‚ÑΩ")
    ("|Gamma|"		"‚Ñæ")
    ("|pi|"		"‚Ñº")
    ("|Pi|"		"‚Ñø")
    ;; Types
    ("::"		"‚à∑")
    ;; Quantifiers
    ("forall"		"‚àÄ")
    ("exists"		"‚àÉ")
    ;; Arrows
    ("->"		"‚Üí")
    ("<-"		"‚Üê")
    ("=>"		"‚áí")
    ;; logic operator
    ("&&"		"‚àß")
    ("||"		"‚à®")
    ;; Comparisons operators
    ("=="		"‚â°")
    ("/="		"‚â¢")
    ("<="		"‚â§")
    (">="		"‚â•")
    ("/<"		"‚âÆ")
    ("/>"		"‚âØ")
    ("++"		"‚ß∫")
    ;; Arithmetic
    ;;("(/)"			"√∑")  ;; comment due to not work
    ("*"			"‚ãÖ")
    ("elem"			"‚àà")
    ("notElem"			"‚àâ")
    ("member"			"‚àà")
    ("notMember"		"‚àâ")
    ("union"			"‚à™")
    ("intersection"		"‚à©")
    ("isSubsetOf"		"‚äÜ")
    ("isProperSubsetOf"		"‚äÇ")
    ;; function
    ("."			"‚àò")
    ;; 
    ("empty"			"‚àÖ")
    ("undefined"		"‚ä•")
    ))


(defvar *unicode-input-subscript*
  '(("_0"	"‚ÇÄ")
    ("_1"	"‚ÇÅ")
    ("_2"	"‚ÇÇ")
    ("_3"	"‚ÇÉ")
    ("_4"	"‚ÇÑ")
    ("_5"	"‚ÇÖ")
    ("_6"	"‚ÇÜ")
    ("_7"	"‚Çá")
    ("_8"	"‚Çà")
    ("_9"	"‚Çâ")
    ("_+"	"‚Çä")
    ("_-"	"‚Çã")
    ("_("	"‚Çç")
    ("_)"	"‚Çé")
    ("_="	"‚Çå")
    ("_a"	"‚Çê")
    ("_e"	"‚Çë")
    ("_o"	"‚Çí")
    ("_x"	"‚Çì")
    ("_h"	"‚Çï")
    ("_k"	"‚Çñ")
    ("_l"	"‚Çó")
    ("_m"	"‚Çò")
    ("_n"	"‚Çô")
    ("_p"	"‚Çö")
    ("_s"	"‚Çõ")
    ("_t"	"‚Çú")))

(defvar *unicode-input-superscript*
  '(("^0"	"‚Å∞")
    ("^1"	"¬π")
    ("^2"	"¬≤")
    ("^3"	"¬≥")
    ("^4"	"‚Å¥")
    ("^5"	"‚Åµ")
    ("^6"	"‚Å∂")
    ("^7"	"‚Å∑")
    ("^8"	"‚Å∏")
    ("^9"	"‚Åπ")
    ("^i"	"‚Å±")
    ("^+"	"‚Å∫")
    ("^-"	"‚Åª")
    ("^="	"‚Åº")
    ("^("	"‚ÅΩ")
    ("^)"	"‚Åæ")
    ("^n"	"‚Åø")))


;;;###autoload
(define-minor-mode unicode-input-mode
  "For unicode characters input. "
  nil
  :keymap (let ((map (make-keymap))
		(uprefix (concat unicode-input-prefix " ")))
	    (progn
	      (dolist (x *unicode-input-haskell-characters*)
		(define-key map (kbd (concat unicode-input-prefix (car x)))
		  (cadr x)))
	      (dolist (x *unicode-input-subscript*)
		(define-key map (kbd (concat unicode-input-prefix (car x)))
		  (cadr x)))
	      (dolist (x *unicode-input-superscript*)
		(define-key map (kbd (concat unicode-input-prefix (car x)))
		  (cadr x))))
	    map))

;;;###autoload
(defun unicode-input-mode-enable ()
  (unicode-input-mode 1))

;;;###autoload
(defun unicode-input-mode-disable ()
  (unicode-input-mode 0))



(provide 'unicode-input)

;;; unicode-input.el ends here

